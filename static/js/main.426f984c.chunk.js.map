{"version":3,"sources":["components/Coords.js","components/Ship.js","containers/App.js","reportWebVitals.js","index.js"],"names":["async","getCoords","coords","fetch","json","Coords","React","Component","constructor","props","super","this","state","longitude","latitude","timestamp","componentDidMount","then","tmp","console","log","setState","setInterval","refresh","catch","err","render","createElement","className","concat","Ship","style","animationPlayState","src","onClick","click","App","stopped","stopRefreshOnClick","bind","prev","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mNAGAA,eAAeC,IACb,MAAMC,QAAeC,MAAM,kDAE3B,aADmBD,EAAOE,OAyDbC,MApDf,cAAqBC,IAAMC,UACzBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXC,UAAW,EACXC,SAAU,EACVC,UAAW,GAIfC,oBACEf,IAAYgB,KAAMC,IAChBC,QAAQC,IAAIF,GACZP,KAAKU,SAAS,CACZR,UAAWK,EAAIL,UACfC,SAAUI,EAAIJ,SACdC,UAAWG,EAAIH,cAKnBO,YAAY,KACVrB,IACGgB,KAAMC,IAEAP,KAAKF,MAAMc,SACdZ,KAAKU,SAAS,CACZR,UAAWK,EAAIL,UACfC,SAAUI,EAAIJ,SACdC,UAAWG,EAAIH,cAIpBS,MAAOC,QAGT,KAILC,SACE,OACEpB,IAAAqB,cAAA,OAAKC,UAAU,aACbtB,IAAAqB,cAAA,KAAGC,UAAU,iDACV,IAAG,UAAAC,OACOlB,KAAKC,MAAME,SAAQ,MAAAe,OAAKlB,KAAKC,MAAMC,UAAS,MAAAgB,OAAKlB,KAAKC,MAAMG,oBCtClEe,MAbDrB,GAEVH,IAAAqB,cAAA,OAAKC,UAAU,mDACbtB,IAAAqB,cAAA,OACEC,UAAU,YACVG,MAAO,CAAEC,mBAAqBvB,EAAMc,QAAsB,SAAZ,WAC9CU,IAAG,gHACHC,QAASzB,EAAM0B,SCoBRC,MA1Bf,cAAkB7B,YAChBC,cACEE,QACAC,KAAKC,MAAQ,CACXyB,SAAS,GAGX1B,KAAK2B,mBAAqB3B,KAAK2B,mBAAmBC,KAAK5B,MAGzD2B,qBACEnB,QAAQC,IAAI,WACZT,KAAKU,SAAUmB,IAAI,CAAQH,SAAUG,EAAKH,WAC1ClB,QAAQC,IAAIT,KAAKC,MAAMyB,SAGzBX,SACE,OACEpB,IAAAqB,cAAA,WACErB,IAAAqB,cAACG,EAAI,CAACK,MAAOxB,KAAK2B,mBAAoBf,QAASZ,KAAKC,MAAMyB,UAC1D/B,IAAAqB,cAACtB,EAAM,CAACkB,QAASZ,KAAKC,MAAMyB,aCbrBI,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAA5B,KAAA2B,EAAAL,KAAA,UAAqBtB,KAAK6B,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,YCEdU,IAAS1B,OACPpB,IAAAqB,cAACrB,IAAM+C,WAAU,KACf/C,IAAAqB,cAACS,EAAG,OAENkB,SAASC,eAAe,SAM1Bd","file":"static/js/main.426f984c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//?asynchronously load iss coordinates from open-notify api. After succesfull fetch deserialize data from into json (asynchronously) and return it\r\nasync function getCoords() {\r\n  const coords = await fetch(\"https://api.wheretheiss.at/v1/satellites/25544\");\r\n  const data = await coords.json();\r\n  return data;\r\n}\r\n\r\n//?main component responsible for displaying ccoordinates\r\nclass Coords extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      longitude: 0,\r\n      latitude: 0,\r\n      timestamp: 0,\r\n    };\r\n  }\r\n  //? after mounting invoke getCoords() [line 4] and set component state's elements accordingly\r\n  componentDidMount() {\r\n    getCoords().then((tmp) => {\r\n      console.log(tmp);\r\n      this.setState({\r\n        longitude: tmp.longitude,\r\n        latitude: tmp.latitude,\r\n        timestamp: tmp.timestamp,\r\n      });\r\n    });\r\n    //? creates interval in with getCoords() [line 4] will be invoked and it's returned value will be used for updating component's state\r\n    //? interva is 100ms\r\n    setInterval(() => {\r\n      getCoords()\r\n        .then((tmp) => {\r\n          //console.log(tmp);\r\n          if (!this.props.refresh) {\r\n            this.setState({\r\n              longitude: tmp.longitude,\r\n              latitude: tmp.latitude,\r\n              timestamp: tmp.timestamp,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          //console.log(err);\r\n        });\r\n    }, 100);\r\n  }\r\n\r\n  //? basic react render function using string interpolation to render current coordinates\r\n  render() {\r\n    return (\r\n      <div className=\"Coords tc\">\r\n        <p className=\"fw8 b--light-blue ba bw2 w-auto dib moon-gray\">\r\n          {\" \"}\r\n          {`Coords ${this.state.latitude}, ${this.state.longitude}, ${this.state.timestamp}`}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coords;\r\n","import React from \"react\";\r\nimport \"./Ship.css\";\r\n\r\n//? component rendering rotating ship. Can be paused or running after seting state acorrdingly\r\nconst Ship = (props) => {\r\n  return (\r\n    <div className=\"center pa5 ph5-ns flex items-center flex-column\">\r\n      <img\r\n        className=\"Ship-logo\"\r\n        style={{ animationPlayState: !props.refresh ? \"running\" : \"paused\" }}\r\n        src={`https://icons.iconarchive.com/icons/goodstuff-no-nonsense/free-space/512/international-space-station-icon.png`}\r\n        onClick={props.click}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ship;\r\n","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport Ship from \"../components/Ship\";\r\nimport Coords from \"../components/Coords\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      stopped: false,\r\n    };\r\n\r\n    this.stopRefreshOnClick = this.stopRefreshOnClick.bind(this);\r\n  }\r\n\r\n  stopRefreshOnClick() {\r\n    console.log(\"stoppin\");\r\n    this.setState((prev) => ({ stopped: !prev.stopped }));\r\n    console.log(this.state.stopped);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Ship click={this.stopRefreshOnClick} refresh={this.state.stopped} />\r\n        <Coords refresh={this.state.stopped} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Coords from \"./components/Coords\";\r\nimport Ship from \"./components/Ship\";\r\nimport App from \"./containers/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}